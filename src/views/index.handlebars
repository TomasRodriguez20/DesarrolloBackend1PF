<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Productos en Tiempo Real</title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <h1>Productos en Tiempo Real</h1>
    <div id="product-list"></div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const productList = document.getElementById('product-list');
const handleAddToCart = async (productId) => {
    try {
        const response = await fetch(`/api/carts/add/${productId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
        });

        if (!response.ok) {
            throw new Error('Error al agregar al carrito');
        }

        const result = await response.json();
        alert(result.message || 'Producto agregado al carrito');
    } catch (error) {
        alert(error.message || 'Error al agregar al carrito');
    }
};

const renderProducts = (products) => {
    productList.innerHTML = '';
    products.forEach(product => {
        const productDiv = document.createElement('div');
        productDiv.dataset.id = product._id;
        productDiv.innerHTML = `
            <h2>${product.title}</h2>
            <p>${product.description}</p>
            <p>Precio: $${product.price}</p>
            <p>Stock: ${product.stock}</p>
            <a href="/products/${product._id}" class="details-btn">Ver detalles</a>
            <button class="add-to-cart-btn" data-id="${product._id}">Agregar al carrito</button>
            <hr>
        `;
        
        const addToCartBtn = productDiv.querySelector('.add-to-cart-btn');
        addToCartBtn.addEventListener('click', () => handleAddToCart(product._id));

        productList.appendChild(productDiv);
    });
};


        socket.on('newProduct', (newProduct) => {
            const existingProducts = Array.from(productList.children).map(productDiv => ({
                id: productDiv.dataset.id,
                title: productDiv.querySelector('h2').innerText,
                description: productDiv.querySelector('p').innerText,
                price: parseFloat(
                    productDiv.querySelector('p:nth-of-type(2)').innerText.replace('Precio: $', '')
                ),
                stock: parseInt(
                    productDiv.querySelector('p:nth-of-type(3)').innerText.replace('Stock: ', '')
                )
            }));
            existingProducts.push(newProduct);
            renderProducts(existingProducts);
        });

        socket.on('productDeleted', (productId) => {
            const filteredProducts = Array.from(productList.children).filter(productDiv => 
                productDiv.dataset.id !== productId
            );
            productList.innerHTML = '';
            filteredProducts.forEach(productDiv => productList.appendChild(productDiv));
        });

        socket.on('initialProducts', (products) => {
            renderProducts(products);
        });

        socket.emit('getProducts');
    </script>
</body>
</html>
